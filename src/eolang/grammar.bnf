(* EBNF-like grammar for EO
Must be compatible with https://github.com/engelberg/instaparse

See also eo-compiler's grammar
https://github.com/yegor256/eo/blob/master/eo-compiler/src/main/antlr4/org/eolang/compiler/Program.g4

First rule MUST be 'program' as that is the default

*)



program = imports types objects WHITESPACE?


WHITESPACE = #"\s+"

ATTRIBUTENAME = #'@[a-z][a-z0-9]{2,15}'
METHODNAME = #'[a-z][a-z0-9]{2,15}'
OBJECTNAME = #'[a-z][a-z0-9]{2,15}'
TYPENAME = #'[A-Z][A-Za-z0-9]{2,15}'

(* TODO: This is a bit too permissive, only valid JVM types should work *)
JVMTYPE = #'\S+'

TYPE = 'type'
OBJECT = 'object'
EXTENDS = 'extends'
IMPORT = 'import'
AS = 'as'
CTOR = 'ctor'
COMMA = ','
COLON = ':'
DOT = '.'
LEFT_BRACKET = '('
RIGHT_BRACKET = ')'
STRING = <'"'> #"(\\\"|[^\"])*" <'"'>
INT = #"-?[1-9]*[0-9]"
(* TODO: Full IEEE FP spec including 10.32e-15 and -inf? *)
FLOAT = #"-?[0-9]*(\\.[0-9]+)"


import = <IMPORT> <WHITESPACE> JVMTYPE
imports = (import <WHITESPACE>)*

extends = <EXTENDS> <WHITESPACE> TYPENAME (<COMMA> <WHITESPACE>? TYPENAME)*

paramlist = TYPENAME <WHITESPACE> OBJECTNAME (<COMMA> TYPENAME <WHITESPACE> OBJECTNAME)*
params = <LEFT_BRACKET> <WHITESPACE>? paramlist? <WHITESPACE>? <RIGHT_BRACKET>
method = TYPENAME <WHITESPACE> METHODNAME params
methods = (method <WHITESPACE>)*

type = TYPE <WHITESPACE> TYPENAME (<WHITESPACE> extends)? <COLON> <WHITESPACE>? methods
types = (type <WHITESPACE>)*

number = INT | FLOAT
call = obj <DOT> METHODNAME <LEFT_BRACKET> args? <RIGHT_BRACKET>
obj = ATTRIBUTENAME | OBJECTNAME | object | call
arg = STRING | number | obj
args = arg WHITESPACE? (<COMMA> <WHITESPACE>? arg)*
objectcopy = OBJECTNAME <COLON> <WHITESPACE>? args?
typenames = TYPENAME <WHITESPACE>? (<COMMA> <WHITESPACE> TYPENAME)*
attrib = TYPENAME <WHITESPACE> ATTRIBUTENAME
attribs = (attrib <WHITESPACE>)*

methodimpl = method (<COLON> call)?
methodimpls = (methodimpl <WHITESPACE>)*
objectcall = OBJECTNAME (<LEFT_BRACKET> args <RIGHT_BRACKET>)?
objectdecl = <OBJECT> <WHITESPACE> objectcall <WHITESPACE> (<AS> <WHITESPACE> typenames <WHITESPACE>)? <COLON> attribs methodimpls

object = objectcopy | objectdecl
objects = (object <WHITESPACE>)*
